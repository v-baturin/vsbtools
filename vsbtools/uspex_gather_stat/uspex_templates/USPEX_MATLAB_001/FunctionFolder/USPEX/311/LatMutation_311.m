function LatMutation_311(Ind_No)

% USPEX Version 7.3.3
global POOL_STRUC
global ORG_STRUC
global OFF_STRUC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%% CREATING Mutants by mutation%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
goodMutant = 0;
goodMutLattice = 0;

count = 1;
while goodMutant + goodMutLattice ~= 2
    count = count + 1;
    
    ind = chooseGoodComposition(ORG_STRUC.tournament, ORG_STRUC.paretoRanking, POOL_STRUC);

    if count > 50 || ind < 0
       %disp('failed to do Latmutation in 50 attempts, switch to Random');
       USPEXmessage(512,'',0);
       Random_311(Ind_No);
       break;
    end
    %toMutate = find (ORG_STRUC.tournament>RandInt(1,1,[0,max(ORG_STRUC.tournament)-1]));
    %ind = toMutate(end);
    MtypeLIST = POOL_STRUC.POPULATION(ind).MtypeLIST;
    numMols   = POOL_STRUC.POPULATION(ind).numMols;
    lattice   = POOL_STRUC.POPULATION(ind).LATTICE;
    numIons   = POOL_STRUC.POPULATION(ind).numIons;
    typesAList= POOL_STRUC.POPULATION(ind).typesAList;
    numBlocks = POOL_STRUC.POPULATION(ind).numBlocks;

    [MUT_LAT,strainMatrix] = lattice_Mutation(POOL_STRUC.POPULATION(ind).LATTICE);

% optimize the lattice
    tempMOLS = POOL_STRUC.POPULATION(ind).MOLECULES;
    for i=1:sum(numMols)
    coor1(i,:)=POOL_STRUC.POPULATION(ind).MOLECULES(i).MOLCOORS(1,:);
    end

    [coord, MUT_LAT] = optLattice(coor1, MUT_LAT);
     absolute=coord-coor1;
    for j=1:sum(numMols)
         for k=1:length(ORG_STRUC.STDMOL(MtypeLIST(j)).types)
             tempMOLS(j).MOLCOORS(k,:)=POOL_STRUC.POPULATION(ind).MOLECULES(j).MOLCOORS(k,:)+absolute(j,:);
         end
    end

    goodMutant = newMolCheck (tempMOLS,MUT_LAT,MtypeLIST,ORG_STRUC.minDistMatrice);
    goodMutLattice = latticeCheck(MUT_LAT);

    if goodMutant + goodMutLattice == 2
        for inder = 1: sum(numMols)
          tempMOLS(inder).ZMATRIX = real(NEW_coord2Zmatrix(tempMOLS(inder).MOLCOORS,ORG_STRUC.STDMOL(MtypeLIST(inder)).format));
        end
        OFF_STRUC.POPULATION(Ind_No).MOLECULES = tempMOLS;
        OFF_STRUC.POPULATION(Ind_No).LATTICE =  MUT_LAT;
        OFF_STRUC.POPULATION(Ind_No).numIons = numIons;
        OFF_STRUC.POPULATION(Ind_No).numMols = numMols;
        OFF_STRUC.POPULATION(Ind_No).MtypeLIST = MtypeLIST;
        OFF_STRUC.POPULATION(Ind_No).typesAList = typesAList;
        OFF_STRUC.POPULATION(Ind_No).numBlocks = numBlocks;

        info_parents = struct('parent', {},'strainMatrix', {}, 'enthalpy', {});
        info_parents(1).parent=num2str(POOL_STRUC.POPULATION(ind).Number);
        info_parents.enthalpy = POOL_STRUC.POPULATION(ind).enthalpy;
        info_parents.strainMatrix=strainMatrix;
        OFF_STRUC.POPULATION(Ind_No).Parents = info_parents;
        OFF_STRUC.POPULATION(Ind_No).howCome = ' LatMutate ';
        disp(['Structure ' num2str(Ind_No) '  generated by latmutation']);
    end

end

%%%%%%%%%%%%%%% END creating mutants%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
