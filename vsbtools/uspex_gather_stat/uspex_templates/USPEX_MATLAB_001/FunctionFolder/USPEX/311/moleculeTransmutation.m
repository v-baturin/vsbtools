function moleculeTransmutation(Ind_No)

global POP_STRUC
global ORG_STRUC
global OFF_STRUC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%% CREATING mutants by transmutation %%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goodMutant = 0;
goodMutLattice = 0;

while goodMutant + goodMutLattice  ~= 2
    toTransMutate = find (ORG_STRUC.tournament>RandInt(1,1,[0,max(ORG_STRUC.tournament)-1]));
    Ind_P = POP_STRUC.ranking(toTransMutate(end));
%    MtypeLIST = POP_STRUC.POPULATION(Ind_P).MtypeLIST;
%    numMols   = POP_STRUC.POPULATION(Ind_P).numMols;
%    numIons   = POP_STRUC.POPULATION(Ind_P).numIons;
%    typesAList= POP_STRUC.POPULATION(Ind_P).typesAList;
%    MUT_LAT   = POP_STRUC.POPULATION(Ind_P).LATTICE;
%    numBlocks = POP_STRUC.POPULATION(Ind_P).numBlocks;
%    order     = POP_STRUC.POPULATION(Ind_P).order;

    [TRANSMUT,goodFather,noOfSwapsNow,numMols, numBlocks] = swapIons_transmutation_final(Ind_P);

    if isempty(TRANSMUT) % transmutation didn't exist
     goodMutant = 0;
     goodMutLattice = 0;
    else
     goodMutLattice = 1; % because lattice is not changed we don't have to check it

    absMUT_COORD= TRANSMUT*MUTLAT;

    for ind = 1:sum (numMols)
     displacement(ind,:)=absMUT_COORD(ind,:)-POP_STRUC.POPULATION(Ind_P).MOLECULES(ind).ZMATRIX(1,:);
    end

    tempMOLS = POP_STRUC.POPULATION(Ind_P).MOLECULES;
    for ind = 1:sum (numMols)
        for inder = 1:3
            tempMOLS(ind).MOLCOORS(:,inder) = tempMOLS(ind).MOLCOORS(:,inder) +displacement(ind,inder);
        end
    end

          goodMutant = newMolCheck(tempMOLS,MUT_LAT,MtypeLIST,ORG_STRUC.minDistMatrice);




    end

    if goodMutant + goodMutLattice == 2

        OFF_STRUC.POPULATION(Ind_No).COORDINATES = TRANSMUT;

%%  CHANGE IT, now transmutation changes the number of atoms, thus the volume should be changed too
% 7.2.7 change - average of closest convex_hull volumes
%      OFF_STRUC.POPULATION(Ind_No).LATTICE = POP_STRUC.POPULATION(POP_STRUC.ranking(toTransMutate(end))).LATTICE;
       temp_potLat = POP_STRUC.POPULATION(POP_STRUC.ranking(toTransMutate(end))).LATTICE;
       volLat = det(temp_potLat);
    if (ORG_STRUC.varcomp == 1) && (size(ORG_STRUC.numIons,1) == 2) && (ORG_STRUC.optType == 1) && (sameComposition(ORG_STRUC.numIons(1,:),ORG_STRUC.numIons(2,:)) == 0)
       N_T = length(ORG_STRUC.atomType);
       ch = POP_STRUC.convex_hull;
       try
     % works only for 2 types of atoms!
         x = numIons(N_T)/sum(numIons(1:N_T));
         i = 1;
         while x > ch([i+1],N_T)/sum(ch([i+1],1:N_T))
          i = i + 1;
         end
         v1 = det(POP_STRUC.POPULATION(ch([i+1],N_T+2)).LATTICE);
         v2 = det(POP_STRUC.POPULATION(ch([i],N_T+2)).LATTICE);
         a1 = ch([i+1],N_T)/sum(ch([i+1],1:N_T));
         a2 = ch([i],N_T)/sum(ch([i],1:N_T));
         latVol = abs((x-a2)/(a2-a1))*v1 + abs((x-a1)/(a2-a1))*v2;
       catch
        latVol = 0;
        for it = 1 : length(ORG_STRUC.latVolume)
           latVol = latVol + numIons(it)*ORG_STRUC.latVolume(it);
        end
       end
     else
       latVol = volLat;
     end

      ratio = latVol/volLat;
      temp_potLat = latConverter(temp_potLat);
      temp_potLat(1:3)= temp_potLat(1:3)*(ratio)^(1/3);
      OFF_STRUC.POPULATION(Ind_No).LATTICE = latConverter(temp_potLat);

      info_parents = struct('parent1', {},'noOfTransNow', {}, 'enthalpy', {});
      info_parents(1).parent1=POP_STRUC.POPULATION(POP_STRUC.ranking(toTransMutate(end))).Number;
      info_parents.noOfTransNow=noOfSwapsNow;
      info_parents.enthalpy=POP_STRUC.POPULATION(POP_STRUC.ranking(toTransMutate(end))).FITNESSES(end);
      OFF_STRUC.POPULATION(Ind_No).Parents = info_parents;
      OFF_STRUC.POPULATION(Ind_No).numIons = numIons;
      OFF_STRUC.POPULATION(Ind_No).numBlocks = numBlocks;
      disp(['Structure ' num2str(Ind_No) '  generated by transmutation']);
    end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%% END creating mutants %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
