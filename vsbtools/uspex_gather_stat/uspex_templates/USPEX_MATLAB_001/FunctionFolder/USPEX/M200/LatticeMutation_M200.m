function LatticeMutation_M200(Ind_No)

% USPEX Version 7.3.3

global POP_STRUC
global ORG_STRUC
global OFF_STRUC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%% CREATING Mutants by mutation%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


goodMutant = 0;
goodMutLattice = 0;

while goodMutant + goodMutLattice ~= 2
    toMutate = find (ORG_STRUC.tournament>RandInt(1,1,[0,max(ORG_STRUC.tournament)-1]));
    ind = POP_STRUC.ranking(toMutate(end));
    numIons     = POP_STRUC.POPULATION(ind).numIons;
    COORDINATES = POP_STRUC.POPULATION(ind).COORDINATES;
    LATTICE     = POP_STRUC.POPULATION(ind).LATTICE;
    order       = POP_STRUC.POPULATION(ind).order;
    [MUT_LAT,strainMatrix, new_Coord] = lattice_2D_Mutation(COORDINATES, numIons, LATTICE, order);
    goodMutant = distanceCheck(new_Coord,MUT_LAT,numIons, ORG_STRUC.minDistMatrice);
    goodMutLattice = latticeCheck(MUT_LAT);

    if goodMutant + goodMutLattice == 2

        OFF_STRUC.POPULATION(Ind_No).COORDINATES = new_Coord;
        OFF_STRUC.POPULATION(Ind_No).LATTICE = MUT_LAT;
        OFF_STRUC.POPULATION(Ind_No).numIons = numIons;
        info_parents = struct('parent', {},'strainMatrix', {}, 'enthalpy', {});
        info_parents(1).parent=num2str(POP_STRUC.POPULATION(ind).Number);
        info_parents.enthalpy = POP_STRUC.POPULATION(ind).Enthalpies(end)/sum(numIons);
        info_parents.strainMatrix=strainMatrix;
        OFF_STRUC.POPULATION(Ind_No).Parents = info_parents;
        OFF_STRUC.POPULATION(Ind_No).howCome = ' LatMutate ';
        disp(['Structure ' num2str(Ind_No) '  generated by latmutation']);
    end
end

%%%%%%%%%%%%%%% END creating mutants%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [new_Lattice, strainMatrix, new_Coord]= lattice_2D_Mutation(coord, numIons, lattice, order)

global ORG_STRUC

new_Coord = coord;
max_sigma = ORG_STRUC.howManyMut;
N = sum(numIons);

% in this function both the matrice and the parameter represatation is required, so first we prepare the two
if length(lattice) == 6
 lattice = latConverter(lattice);
end
temp_potLat = latConverter(lattice);
new_Lattice=[];
dummy = 1;

[junk, ranking] = sort(order);  % junk = order(ranking)
r1 = order(ranking(1));
rN = order(ranking(N));

if rN > r1
 for i = 1 : N
  rI = order(ranking(i));
  koef = (rN-rI)/(rN-r1);
  deviat_dist = randn(3,1)*max_sigma*koef;

  new_Coord(ranking(i),1) = coord(ranking(i),1) + deviat_dist(1)/temp_potLat(1);
  new_Coord(ranking(i),2) = coord(ranking(i),2) + deviat_dist(2)/temp_potLat(2);
  new_Coord(ranking(i),3) = coord(ranking(i),3) + deviat_dist(3)/temp_potLat(3);

  new_Coord(ranking(i),1) = new_Coord(ranking(i),1) - floor(new_Coord(ranking(i),1));
  new_Coord(ranking(i),2) = new_Coord(ranking(i),2) - floor(new_Coord(ranking(i),2));
  new_Coord(ranking(i),3) = new_Coord(ranking(i),3) - floor(new_Coord(ranking(i),3));
 end
end


while det(new_Lattice)<0.01 || dummy
    dummy = 0;
    strainMatrix = zeros(3);
    epsilons = randn(6,1)*ORG_STRUC.mutationRate;
    strainMatrix(1,1) = 1+epsilons(1);
    strainMatrix(2,2) = 1+epsilons(2);
    strainMatrix(3,3) = 1;
    strainMatrix(1,2) = epsilons(4)/2;
    strainMatrix(2,1) = epsilons(4)/2;
    strainMatrix(1,3) = 0;
    strainMatrix(3,1) = 0;
    strainMatrix(2,3) = 0;
    strainMatrix(3,2) = 0;
 new_Lattice = lattice*strainMatrix;
end
temp_potLat = new_Lattice;

ALat = det(temp_potLat(1:2,1:2));
if sign(ALat)==-1
      %%%%%%%%%%%%%%%%Trouble!!!!!!!
      %here we need a routine to change the lattice and the respective
      %coordinates so that det is no longer negative
      error = 'the determinant of the lattice generated by heredity is negative';
      save ([ resFolder '/EEERRROOOR_determinante.txt'],'error')
end

      latA = det(lattice(1:2, 1:2));

ratio = latA/ALat;
temp_potLat = latConverter(temp_potLat);
temp_potLat(1:2)= temp_potLat(1:2)*(ratio)^(1/3);
new_Lattice = latConverter(temp_potLat);

