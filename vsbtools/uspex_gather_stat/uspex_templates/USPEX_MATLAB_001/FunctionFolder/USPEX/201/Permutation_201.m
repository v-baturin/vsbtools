function Permutation_201(Ind_No)

global POP_STRUC
global ORG_STRUC
global OFF_STRUC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%% CREATING mutants by permutation %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goodMutant = 0;
count = 1;
while goodMutant  ~= 1
%%%%%%%%%%%%%% here we only choose reasonable structure to do mutation
    count = count + 1;
    if count > 50
       %disp('failed to do Permutation in 50 attempts, switch to Random');
       USPEXmessage(511,'',0);
       Random_201(Ind_No);
       break;
    end

    goodParent = 0;
    while ~goodParent
      goodParent = 1;
      toPerMutate = find(ORG_STRUC.tournament>RandInt(1,1,[0,max(ORG_STRUC.tournament)-1]));
      ind = POP_STRUC.ranking(toPerMutate(end));
      Surface_numIons  =  POP_STRUC.POPULATION(ind).Surface_numIons;
      for i = 1 : length(Surface_numIons)
          if (ORG_STRUC.numIons(i)>0) && (Surface_numIons(i) == 0)
               goodParent = 0;
          end
      end
    end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % create a PERMUTANT. The swapIons_mutation simply swaps ions
    % of a different type
    bulklat  = POP_STRUC.POPULATION(ind).Bulk_LATTICE;
    bulkcoor = POP_STRUC.POPULATION(ind).Bulk_COORDINATES;
    ntyp     = POP_STRUC.POPULATION(ind).Bulk_numIons;

    Surface_order  =  POP_STRUC.POPULATION(ind).Surface_order;
    cell=POP_STRUC.POPULATION(ind).cell;
    Surface_LATTICE = POP_STRUC.POPULATION(ind).Surface_LATTICE;
    father = POP_STRUC.POPULATION(ind).Surface_COORDINATES;

    [PERMUT,noOfSwapsNow] = swapIons_mutation_final(father, Surface_numIons, Surface_order);

%%%%%%%To Make Surface
    if noOfSwapsNow>0
       [lat,candidate,numIons,chanAList] = makeSurface(Surface_LATTICE, PERMUT,Surface_numIons, bulklat, bulkcoor, ntyp,ORG_STRUC.vacuumSize(1));
       [coor, composition] = getSurface(candidate, numIons, lat);
       goodMutant = distanceCheck(coor, lat, composition, ORG_STRUC.minDistMatrice);
    end
    if goodMutant == 1
      info_parents = struct('parent', {},'noOfSwapsNow', {}, 'enthalpy', {});
      info_parents(1).parent=num2str(POP_STRUC.POPULATION(ind).Number);
      info_parents.noOfSwapsNow=noOfSwapsNow;
      info_parents.enthalpy = POP_STRUC.POPULATION(ind).Enthalpies(end)/sum(numIons);
      OFF_STRUC.POPULATION(Ind_No).Parents = info_parents;
      OFF_STRUC.POPULATION(Ind_No).Surface_LATTICE = Surface_LATTICE;
      OFF_STRUC.POPULATION(Ind_No).Surface_COORDINATES = PERMUT;
      OFF_STRUC.POPULATION(Ind_No).Surface_numIons = Surface_numIons;
      OFF_STRUC.POPULATION(Ind_No).cell = cell;
      OFF_STRUC.POPULATION(Ind_No).Bulk_LATTICE=bulklat;
      OFF_STRUC.POPULATION(Ind_No).Bulk_COORDINATES=bulkcoor;
      OFF_STRUC.POPULATION(Ind_No).Bulk_numIons=ntyp;
      OFF_STRUC.POPULATION(Ind_No).numIons = numIons;
      OFF_STRUC.POPULATION(Ind_No).LATTICE = lat;
      OFF_STRUC.POPULATION(Ind_No).COORDINATES = candidate;
      OFF_STRUC.POPULATION(Ind_No).chanAList=chanAList;
      OFF_STRUC.POPULATION(Ind_No).howCome = 'Permutate';

      disp(['Structure ' num2str(Ind_No) '  generated by permutation']);
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%% END creating mutants %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
