function Mutation_201(Ind_No)

% USPEX Version 7.4.1
global POP_STRUC
global ORG_STRUC
global OFF_STRUC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%% CREATING Mutants by atom positions mutation%%%%%%%%%%%%%%%%%
goodAtomMutant = 0;
goodMutLattice = 0;
count = 1;
while goodAtomMutant + goodMutLattice ~= 2
    count = count + 1;
    if count > 50
       %disp('failed to do Heredity in 50 attempts, switch to Random');
       USPEXmessage(507,'',0);
       Random_201(Ind_No);
       break;
    end
    goodParent=0;
    while ~goodParent
       goodParent=1;
       toMutate = find(ORG_STRUC.tournament>RandInt(1,1,[0,max(ORG_STRUC.tournament)-1]));
       ind = POP_STRUC.ranking(toMutate(end));
       if (sum(POP_STRUC.POPULATION(ind).Surface_numIons) == 0)
          goodParent = 0;
       end
    end
    Surface_COORDINATES = POP_STRUC.POPULATION(ind).Surface_COORDINATES;
    Surface_numIons     = POP_STRUC.POPULATION(ind).Surface_numIons;
    Surface_LATTICE     = POP_STRUC.POPULATION(ind).Surface_LATTICE;
    Surface_order       = POP_STRUC.POPULATION(ind).Surface_order;
    bulk_lat            = POP_STRUC.POPULATION(ind).Bulk_LATTICE;
    bulk_pos            = POP_STRUC.POPULATION(ind).Bulk_COORDINATES;
    bulk_numIons        = POP_STRUC.POPULATION(ind).Bulk_numIons;

    [MUT_COORD]= move_all_atom_Mutation(Surface_COORDINATES, Surface_numIons, Surface_LATTICE, Surface_order, 0.5);
    N_Moved = sum(Surface_numIons);
    [lat,candidate,numIons,chanAList] = makeSurface(Surface_LATTICE,MUT_COORD, Surface_numIons,...
                                         bulk_lat, bulk_pos, bulk_numIons, ORG_STRUC.vacuumSize(1));
 
    [coor, composition] = getSurface(candidate, numIons, lat);
    goodAtomMutant = distanceCheck (coor,lat,composition, ORG_STRUC.minDistMatrice);   %to reduce the cost
    goodMutLattice = 1; % since we don't change it

    if goodAtomMutant + goodMutLattice == 2
        OFF_STRUC.POPULATION(Ind_No).Bulk_LATTICE        = bulk_lat;
        OFF_STRUC.POPULATION(Ind_No).Bulk_COORDINATES    = bulk_pos;
        OFF_STRUC.POPULATION(Ind_No).Bulk_numIons        = bulk_numIons;
        OFF_STRUC.POPULATION(Ind_No).numIons             = numIons;
        OFF_STRUC.POPULATION(Ind_No).LATTICE             = lat;
        OFF_STRUC.POPULATION(Ind_No).COORDINATES         = candidate;
        OFF_STRUC.POPULATION(Ind_No).chanAList           = chanAList;
        OFF_STRUC.POPULATION(Ind_No).Surface_COORDINATES = MUT_COORD;
        OFF_STRUC.POPULATION(Ind_No).Surface_LATTICE     = Surface_LATTICE;
        OFF_STRUC.POPULATION(Ind_No).Surface_numIons     = Surface_numIons;
        OFF_STRUC.POPULATION(Ind_No).cell  = POP_STRUC.POPULATION(ind).cell;
        info_parents = struct('parent', {},'N_Moved', {}, 'enthalpy', {});
        info_parents(1).parent = num2str(POP_STRUC.POPULATION(ind).Number);
        info_parents.N_Moved = N_Moved;
        info_parents.enthalpy = POP_STRUC.POPULATION(ind).Enthalpies(end)/sum(numIons);
        OFF_STRUC.POPULATION(Ind_No).howCome = 'CoorMutate';
        OFF_STRUC.POPULATION(Ind_No).Parents = info_parents;
        disp(['Structure ' num2str(Ind_No) '  generated by mutation']);
    end
end
%%%%%%%%%%%%%%% END creating mutants%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
