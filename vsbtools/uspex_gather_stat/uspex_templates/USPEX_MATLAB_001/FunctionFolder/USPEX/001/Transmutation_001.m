function Transmutation_001(Ind_No)

% USPEX Version 6.6.7
global POP_STRUC
global ORG_STRUC
global OFF_STRUC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%% CREATING mutants by permutation %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goodMutant = 0;
goodMutLattice = 0;
count = 0;
while goodMutant + goodMutLattice  ~= 2
    count = count + 1;
    if count > 50
       %disp('failed to do mutation in 50 attempts, switch to Random');
       USPEXmessage(508,'',0);
       Random_001(Ind_No);
       break;
    end

    toTransMutate = find(ORG_STRUC.tournament>RandInt(1,1,[0,max(ORG_STRUC.tournament)-1]));
    ind = POP_STRUC.ranking(toTransMutate(end));
    % create a PERMUTANT. The swapIons_mutation simply swaps ions
    % of a different type
%    LATTICE = POP_STRUC.POPULATION(ind).LATTICE;
%    father  = POP_STRUC.POPULATION(ind).COORDINATES;
%    numIons = POP_STRUC.POPULATION(ind).numIons;
%    order = POP_STRUC.POPULATION(ind).order;
    [TRANSMUT,noOfSwapsNow,numIons,LATTICE] = swapIons_transmutation_final_001(ind);
    if isempty(TRANSMUT)
       goodMutant = 0;
    else
       goodMutant = distanceCheck(TRANSMUT,LATTICE, numIons, ORG_STRUC.minDistMatrice);
       if goodMutant == 1
          goodMutant = checkConnectivity(TRANSMUT, LATTICE, numIons);
       end
       
       if goodMutant == 1
          goodMutant = CheckOldOffspring(LATTICE, TRANSMUT, numIons, Ind_No, 'Transmutation_001');
       end
       
    end
    goodMutLattice = 1; % since permutation doesn't change it

    if goodMutant + goodMutLattice == 2
        [LATTICE,TRANSMUT] = reduce_Cluster(LATTICE,TRANSMUT);
        [LATTICE,TRANSMUT] = makeCluster(LATTICE,TRANSMUT, ORG_STRUC.vacuumSize(1));
        OFF_STRUC.POPULATION(Ind_No).COORDINATES =  TRANSMUT;
        OFF_STRUC.POPULATION(Ind_No).LATTICE = LATTICE;
        OFF_STRUC.POPULATION(Ind_No).howCome = 'TransMutate';
        OFF_STRUC.POPULATION(Ind_No).numIons = numIons;

        info_parents = struct('parent', {},'noOfTransNow', {}, 'enthalpy', {});
        info_parents(1).parent=num2str(POP_STRUC.POPULATION(ind).Number);
        info_parents.noOfSwapsNow=noOfSwapsNow;
        info_parents.enthalpy=POP_STRUC.POPULATION(ind).Enthalpies(end)/sum(numIons);
        OFF_STRUC.POPULATION(Ind_No).Parents = info_parents;
        disp(['Structure ' num2str(Ind_No) ' generated by transmutation; count=' num2str(count)]);
    else
        disp('Structure not satisfy conditions!');
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%% END creating mutants %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
