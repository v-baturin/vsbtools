function Mutation_M400(Ind_No)
% $Rev$
% $Author$
% $Date$

global POP_STRUC
global ORG_STRUC
global OFF_STRUC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%% CREATING Offspring with angles mutations %%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

angles_num = size(POP_STRUC.POPULATION(1).ANGLES(:,:), 1);

% Select a structure using tournament scheme:
toMutate = find(ORG_STRUC.tournament>RandInt(1,1,[0,max(ORG_STRUC.tournament)-1]));
ind      = POP_STRUC.ranking(toMutate(end));

rand_structure = POP_STRUC.POPULATION(ind).ANGLES(1:end,:);

% Generate percent of angles to be rotated - from 1 to 20%:
fracRot = RandInt(1,1,[0,20])/100.0;
angles2rotate = round(fracRot * angles_num);
% Allow at least one angle to be rotated to avoid wasting time on
% calculations (useful for small calculations):
if angles2rotate == 0
    angles2rotate = 1;
end

potentialOffspring = rand_structure;
for i=1:angles2rotate
    while 1
        % Random number of angle to be replaced:
        rand_a = RandInt(1,1,[1,angles_num]);

        % Random number of angle to replace above angle:
        rand_b = RandInt(1,1,[1,angles_num]);
        if rand_a ~= rand_b
            break
        end
    end
    
    % Replace angle # rand_a with angle # rand_b:
    potentialOffspring(rand_a, :) = rand_structure(rand_b, :);
end

OFF_STRUC.POPULATION(Ind_No).ANGLES   = potentialOffspring;
% We need just first list of amino acids, since it won't change:
OFF_STRUC.POPULATION(Ind_No).RESIDUES = POP_STRUC.POPULATION(1).RESIDUES;
OFF_STRUC.POPULATION(Ind_No).numIons  = ORG_STRUC.numIons;
OFF_STRUC.POPULATION(Ind_No).howCome  = 'Rotation';

info_parents = struct('parent', {}, 'enthalpy', {});
info_parents(1).parent = num2str(POP_STRUC.POPULATION(ind).Number);
info_parents.enthalpy = POP_STRUC.POPULATION(ind).Enthalpies(end)/ORG_STRUC.numIons;
OFF_STRUC.POPULATION(Ind_No).Parents = info_parents;


disp(['Structure ' num2str(Ind_No) ' generated by rotmutation']);
