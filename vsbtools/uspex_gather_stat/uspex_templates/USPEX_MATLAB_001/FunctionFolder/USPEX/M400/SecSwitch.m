function SecSwitch(Ind_No)
%function SecSwitch()
%Ind_No = 5;

% $Rev$
% $Author$
% $Date$

global POP_STRUC
global ORG_STRUC
global OFF_STRUC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%% CREATING Offspring with Secondary Switch %%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

angles_num = size(POP_STRUC.POPULATION(1).ANGLES(:,:), 1);

% Select a structure using tournament scheme:
toMutate = find(ORG_STRUC.tournament>RandInt(1,1,[0,max(ORG_STRUC.tournament)-1]));
ind      = POP_STRUC.ranking(toMutate(end));

sec_struct = POP_STRUC.POPULATION(ind).SEC_STRUCT;

rand_structure = POP_STRUC.POPULATION(ind).ANGLES(1:end,:);

% Find continuous secondary structures: 
cont_seq = struct('names'  , '', ...
                  'numbers', [] ...
                  );

start_s = 1;
counter = 1;
for i=1:size(sec_struct, 2)
    if i > 1
        if ~isequal(sec_struct{i}, sec_struct{i-1})
            end_s = i-1;
            diap = [start_s, end_s];
            start_s = i;
            cont_seq.names{counter} = sec_struct{i-1};
            cont_seq.numbers = [cont_seq.numbers; diap];
            counter = counter + 1;
        end
        if i == size(sec_struct, 2)
            end_s = i;
            diap = [start_s, end_s];
            cont_seq.names{counter} = sec_struct{i};
            cont_seq.numbers = [cont_seq.numbers; diap];
            counter = counter + 1;
        end
    end
end

potentialOffspring = rand_structure;


if size(cont_seq.numbers) ~= [0, 0]

    %disp(['Secondary structures (each residue): ' strjoin(sec_struct, ' ')]);
    %disp(['Secondary structures (compressed)  : ' strjoin(cont_seq.names, ' ')]);

    disp(['Secondary structures (each residue): ' strrep(reshape(char(sec_struct)',1,[]), ' ',' ')    ]);
    disp(['Secondary structures (compressed)  : ' strrep(reshape(char(cont_seq.names)',1,[]), ' ',' ')]);

    % Select a secondary structure to change it to another secondary structure
    sec2change = RandInt(1,1,[1,size(cont_seq.names,2)]);
    new_secstr = RandInt(1,1,[1,7]);
    [phi, psi, name] = secStructs(new_secstr);

    disp([cont_seq.names{sec2change} ' from ' num2str(cont_seq.numbers(sec2change,1)) ' to ' num2str(cont_seq.numbers(sec2change,2)) ' will be changed to ' name]);

    for i=cont_seq.numbers(sec2change,1):cont_seq.numbers(sec2change,2)
        potentialOffspring(i,:) = [phi, psi];
    end

% This part changes the longest Coil:
%     % Variables to select the longest Coil:
%     len        = 0;
%     longest_id = 0;
%     for i=1:size(cont_seq.names,2)
%         if strcmp(cont_seq.names{i}, 'Coil')
%             len1 = cont_seq.numbers(i,:);
%             len1 = len1(2) - len1(1) + 1;
%             if len1 > len
%                 len        = len1;
%                 longest_id = i;
%             end
%         end
%     end
%     
%     if longest_id > 0
%         % sec2change = RandInt(1,1,[1,size(cont_seq.names,2)]);
%         sec2change = longest_id;
%         new_secstr = RandInt(1,1,[1,7]);
%         [phi, psi, name] = secStructs(new_secstr);
%         
%         disp(['Coil from ' num2str(cont_seq.numbers(sec2change,1)) ' to ' num2str(cont_seq.numbers(sec2change,2)) ' will be changed to ' name]);
%         
%         for i=cont_seq.numbers(sec2change,1):cont_seq.numbers(sec2change,2)
%             potentialOffspring(i,:) = [phi, psi];
%         end
%     else
%         disp('No coils were found.')
%     end

% If STRIDE cannot find secondary structures, assign 'Coil' to all the
% residues. We don't need this part anymore:
%else
%    disp('Secondary switch was not applied: no secondary structures found by STRIDE.');
end

OFF_STRUC.POPULATION(Ind_No).ANGLES   = potentialOffspring;
% We need just first list of amino acids, since it won't change:
OFF_STRUC.POPULATION(Ind_No).RESIDUES = POP_STRUC.POPULATION(1).RESIDUES;
OFF_STRUC.POPULATION(Ind_No).numIons  = ORG_STRUC.numIons;
OFF_STRUC.POPULATION(Ind_No).howCome  = 'SecSwitch';

info_parents = struct('parent', {}, 'enthalpy', {});
info_parents(1).parent = num2str(POP_STRUC.POPULATION(ind).Number);
info_parents.enthalpy = POP_STRUC.POPULATION(ind).Enthalpies(end)/ORG_STRUC.numIons;
OFF_STRUC.POPULATION(Ind_No).Parents = info_parents;


disp(['Structure ' num2str(Ind_No) ' generated by Secondary Switch']);
