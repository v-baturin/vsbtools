function Permutation_M300(Ind_No)

global POP_STRUC
global ORG_STRUC
global OFF_STRUC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%% CREATING mutants by permutation %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goodMutant = 0;
count = 1;
%%%%%%%%%%%%%% here we only choose reasonable structure to do mutation
while goodMutant ~= 1

      count = count + 1;
      if count > 50
         %disp('failed to do Permutation in 50 attempts, switch to Random');
         USPEXmessage(511,'',0);
         Random_M300(Ind_No);
         break;
      end

      toPerMutate = find(ORG_STRUC.tournament>RandInt(1,1,[0,max(ORG_STRUC.tournament)-1]));
      ind = POP_STRUC.ranking(toPerMutate(end));
      GB_order  =  POP_STRUC.POPULATION(ind).GB_order;
      GB_LATTICE = POP_STRUC.POPULATION(ind).GB_LATTICE;
      GB_numIons = POP_STRUC.POPULATION(ind).GB_numIons;
      GB_atyp    = POP_STRUC.POPULATION(ind).GB_typesAList;
      father = POP_STRUC.POPULATION(ind).GB_COORDINATES;

      bulk_lat    =ORG_STRUC.bulk_lat;
      bulk_pos    =ORG_STRUC.bulk_pos;
      bulk_atyp   =ORG_STRUC.bulk_atyp';
      bulk_numIons=ORG_STRUC.bulk_ntyp;
      numIons = GB_numIons + bulk_numIons;

       
      [PERMUT,noOfSwapsNow] = swapIons_mutation_final(father, GB_numIons, GB_order);
    if noOfSwapsNow > 0
      [lat, candidate, typesAList, chanAList] = makeGB(numIons, GB_LATTICE, PERMUT, GB_atyp, bulk_lat, bulk_pos, bulk_atyp, ORG_STRUC.vacuumSize(1));
      goodMutant = distanceCheck(candidate, lat, numIons, ORG_STRUC.minDistMatrice); 
    end

    if goodMutant == 1
      info_parents = struct('parent', {},'noOfSwapsNow', {}, 'enthalpy', {});
      info_parents(1).parent=num2str(POP_STRUC.POPULATION(ind).Number);
      info_parents.noOfSwapsNow=noOfSwapsNow;
      info_parents.enthalpy = POP_STRUC.POPULATION(ind).Enthalpies(end)/sum(numIons);
      OFF_STRUC.POPULATION(Ind_No).Parents = info_parents;
      OFF_STRUC.POPULATION(Ind_No).GB_LATTICE = GB_LATTICE;
      OFF_STRUC.POPULATION(Ind_No).GB_COORDINATES = PERMUT;
      OFF_STRUC.POPULATION(Ind_No).GB_numIons = GB_numIons;
      OFF_STRUC.POPULATION(Ind_No).GB_typesAList = GB_atyp;

      OFF_STRUC.POPULATION(Ind_No).Bulk_LATTICE=bulk_lat;
      OFF_STRUC.POPULATION(Ind_No).Bulk_COORDINATES=bulk_pos;
      OFF_STRUC.POPULATION(Ind_No).Bulk_typesAList=bulk_atyp;
      OFF_STRUC.POPULATION(Ind_No).Bulk_numIons=bulk_numIons;

      OFF_STRUC.POPULATION(Ind_No).numIons = numIons;
      OFF_STRUC.POPULATION(Ind_No).LATTICE = lat;
      OFF_STRUC.POPULATION(Ind_No).COORDINATES = candidate;
      OFF_STRUC.POPULATION(Ind_No).typesAList = typesAList;
      OFF_STRUC.POPULATION(Ind_No).chanAList=chanAList;
      OFF_STRUC.POPULATION(Ind_No).howCome = 'Permutate ';

      disp(['Structure ' num2str(Ind_No) '  generated by permutation']);
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%% END creating mutants %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
