function Rotation_110(Ind_No)

% updated : 8.1.4

global POP_STRUC
global ORG_STRUC
global OFF_STRUC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%% CREATING Mutants by mutation%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goodMutant = 0;
while goodMutant ~= 1
    toRotate = find (ORG_STRUC.tournament>RandInt(1,1,[0,max(ORG_STRUC.tournament)-1]));
    IND = POP_STRUC.ranking(toRotate(end));
    MtypeLIST = POP_STRUC.POPULATION(IND).MtypeLIST;
    numMols   = POP_STRUC.POPULATION(IND).numMols;
    lattice   = POP_STRUC.POPULATION(IND).LATTICE;
    numIons   = POP_STRUC.POPULATION(IND).numIons;
    typesAList= POP_STRUC.POPULATION(IND).typesAList;
    ROTMOLS   = POP_STRUC.POPULATION(IND).MOLECULES;

    [ROTMOLS,rotNow] = Rotate_Random(ROTMOLS, numMols, MtypeLIST);
    goodMutant =  newMolCheck(ROTMOLS, lattice, MtypeLIST, ORG_STRUC.minDistMatrice-0.2);
    if goodMutant == 1
        OFF_STRUC.POPULATION(Ind_No).MOLECULES = ROTMOLS;
        OFF_STRUC.POPULATION(Ind_No).LATTICE = lattice;
        OFF_STRUC.POPULATION(Ind_No).numIons = numIons;
        OFF_STRUC.POPULATION(Ind_No).numMols = numMols;
        OFF_STRUC.POPULATION(Ind_No).MtypeLIST = MtypeLIST;
        OFF_STRUC.POPULATION(Ind_No).typesAList = typesAList;
        OFF_STRUC.POPULATION(Ind_No).howCome = '  Rotate ';
        info_parents = struct('parent', {}, 'howManyRots', {}, 'enthalpy',{});
        info_parents(1).parent=num2str(POP_STRUC.POPULATION(IND).Number);
        info_parents.enthalpy = POP_STRUC.POPULATION(IND).Enthalpies(end)/sum(numIons);
        info_parents.howManyRots=rotNow;
        OFF_STRUC.POPULATION(Ind_No).Parents = info_parents;
        disp(['Structure ' num2str(Ind_No) '  generated by rotmutation']);
    end
end

%%%%%%%%%%%%%%% END creating mutants%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [goodSon,rotNow] = Rotate_Random(father,numMols, MtypeLIST)

global ORG_STRUC
warning off all
rotNow = sum(numMols);
goodSon = father;

for ind = 1: rotNow
    MOLCOORS = [];
    molRot = RandInt(1,1,[1,length(father)]);
    MOLCOORS = father(molRot).MOLCOORS; 
    format = ORG_STRUC.STDMOL(MtypeLIST(molRot)).format;
    
    if rand>0.8 %flip over
       MOLCOORS = bsxfun(@minus, 2*mean(MOLCOORS), MOLCOORS);  %Matrix-vector
    else
       MOLCOORS = Rotate_rigid_body(mean(MOLCOORS), [0 0 1], MOLCOORS, rand*pi);
    end
    goodSon(molRot).MOLCOORS = MOLCOORS;
    goodSon(molRot).ZMATRIX  = NEW_coord2Zmatrix(MOLCOORS,format);
end
