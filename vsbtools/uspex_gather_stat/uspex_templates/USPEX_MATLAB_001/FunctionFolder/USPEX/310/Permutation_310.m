function Permutation_310(Ind_No)

global POP_STRUC
global ORG_STRUC
global OFF_STRUC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%% CREATING Mutants by permutation%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
goodMutant = 0;
goodMutLattice = 0;
count = 1;
while goodMutant + goodMutLattice ~= 2
    count = count + 1;
    if count > 50
       %disp('failed to do permutation in 50 attempts, switch to Random');
       USPEXmessage(511,'',0);
       Random_310(Ind_No);
       break;
    end

    toPerMutate = find (ORG_STRUC.tournament>RandInt(1,1,[0,max(ORG_STRUC.tournament)-1]));
    Ind_P = POP_STRUC.ranking(toPerMutate(end));
    MtypeLIST = POP_STRUC.POPULATION(Ind_P).MtypeLIST;
    numMols   = POP_STRUC.POPULATION(Ind_P).numMols;
    numIons   = POP_STRUC.POPULATION(Ind_P).numIons;
    typesAList= POP_STRUC.POPULATION(Ind_P).typesAList;
    MUT_LAT   = POP_STRUC.POPULATION(Ind_P).LATTICE;
    for i = 1:sum(numMols)
       order(i)= POP_STRUC.POPULATION(Ind_P).MOLECULES(i).order;
    end
    if sum(numMols>0)<2 
       goodMutLattice = 0;
    else
       goodMutLattice = 1;
    end
    if goodMutLattice

    % create a PERMUTANT. The swapIons_mutation simply swaps ions
    % of a different type
    for ind = 1:sum(numMols)
         father(ind,:) = POP_STRUC.POPULATION(Ind_P).MOLECULES(ind).ZMATRIX(1,:);
    end

    [PERMUT, noOfSwapsNow] = swapIons_mutation_final(father, numMols, order);

    if noOfSwapsNow > 0
       absMUT_COORD= PERMUT*MUT_LAT;
       for ind = 1:sum (numMols)
        displacement(ind,:)=absMUT_COORD(ind,:)-POP_STRUC.POPULATION(Ind_P).MOLECULES(ind).ZMATRIX(1,:);
       end
       tempMOLS = POP_STRUC.POPULATION(Ind_P).MOLECULES;
       for ind = 1:sum (numMols)
           for inder = 1:3
               tempMOLS(ind).MOLCOORS(:,inder) = tempMOLS(ind).MOLCOORS(:,inder) +displacement(ind,inder);
           end
       end
       goodMutant = newMolCheck(tempMOLS,MUT_LAT,MtypeLIST,ORG_STRUC.minDistMatrice);
    end
    
    if goodMutant+ goodMutLattice == 2
        for inder = 1: sum(numMols)
        tempMOLS(inder).ZMATRIX = real(NEW_coord2Zmatrix(tempMOLS(inder).MOLCOORS,ORG_STRUC.STDMOL(MtypeLIST(inder)).format));
        end
        OFF_STRUC.POPULATION(Ind_No).MOLECULES = tempMOLS;
        OFF_STRUC.POPULATION(Ind_No).LATTICE =  MUT_LAT;
        OFF_STRUC.POPULATION(Ind_No).numIons =  numIons;
        OFF_STRUC.POPULATION(Ind_No).numMols =  numMols;
        OFF_STRUC.POPULATION(Ind_No).MtypeLIST = MtypeLIST;
        OFF_STRUC.POPULATION(Ind_No).typesAList = typesAList;

        info_parents = struct('parent', {},'noOfSwapsNow', {}, 'enthalpy', {});
        info_parents(1).parent=num2str(POP_STRUC.POPULATION(Ind_P).Number);
        info_parents.noOfSwapsNow=noOfSwapsNow;
        info_parents.enthalpy=POP_STRUC.POPULATION(Ind_P).Enthalpies(end)/sum(numIons);
        OFF_STRUC.POPULATION(Ind_No).Parents = info_parents;
        OFF_STRUC.POPULATION(Ind_No).howCome = ' Permutate ';
        disp(['Structure ' num2str(Ind_No) '  generated by permutation']);
    end
    end
end

%%%%%%%%%%%%%%% END creating mutants%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
