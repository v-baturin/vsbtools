function atomMutation(Ind_No)

global POP_STRUC
global ORG_STRUC
global OFF_STRUC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%% CREATING Mutants by atom positions mutation%%%%%%%%%%%%%%%%%
goodAtomMutant = 0;
safeguard = 0;

while goodAtomMutant ~= 1
      ind = POP_STRUC.ranking(1);
      numIons = POP_STRUC.POPULATION(ind).numIons;
      LATTICE = POP_STRUC.POPULATION(ind).LATTICE;
      COORDINATES = POP_STRUC.POPULATION(ind).COORDINATES;
      [MUT_COORD]= move_all_atom_Mutation(COORDINATES, numIons, LATTICE, ORG_STRUC.howManyMut*(1-safeguard/100));
      

	  N_Moved = sum(numIons);
      goodAtomMutant = distanceCheck (MUT_COORD, LATTICE, numIons, ORG_STRUC.minDistMatrice);
      if safeguard == 100
         goodAtomMutant = 1; % to avoid eternal cycle
         MUT_COORD = COORDINATES; %if all attempts fail. will use the original structure
      end
      safeguard = safeguard + 1;

    if goodAtomMutant 
     
        OFF_STRUC.POPULATION(Ind_No).COORDINATES = MUT_COORD;
        info_parents = struct('parent', {},'N_Moved', {},'mut_mode',{},'mut_fre',{},'enthalpy',{});
        info_parents(1).parent1 = ind;
        info_parents.N_Moved = N_Moved;
        info_parents.mut_mode = 0;
        info_parents.mut_fre = 0;
        info_parents.enthalpy = POP_STRUC.POPULATION(ind).Enthalpies(end);
        OFF_STRUC.POPULATION(Ind_No).Softmode_num = 0;
        OFF_STRUC.POPULATION(Ind_No).superCell = POP_STRUC.POPULATION(ind).superCell;
        OFF_STRUC.POPULATION(Ind_No).Parents = info_parents;
        OFF_STRUC.POPULATION(Ind_No).numIons = POP_STRUC.POPULATION(ind).numIons;
        disp(['Structure ' num2str(Ind_No) '  generated by mutation']);
    end
end
%%%%%%%%%%%%%%% END creating mutants%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
